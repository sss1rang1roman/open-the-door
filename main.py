import telebot
from telebot.types import Message
import random

BOT_TOKEN = ''
data = {}
bot = telebot.TeleBot(BOT_TOKEN)

causes = ["Сжигание ископаемых видов топлива",  
            "Вырубка лесов",  
            "Промышленные выбросы",  
            "Автомобильный транспорт",  
            "Сельское хозяйство",  
            "Увеличение численности населения",  
            "Увеличение потребления энергии",  
            "Пластиковые отходы",  
            "Увеличение числа животноводческих ферм",  
            "Использование угля в энергетике",  
            "Загрязнение океанов",  
            "Химические удобрения",  
            "Увлажнение торфяников",  
            "Нехватка экологических норм",  
            "Отходы производства",  
            "Потребление воды",  
            "Выбросы метана от свалок",  
            "Увеличение числа автомобилей",  
            "Применение пестицидов",  
            "Увеличение потребления мяса",  
            "Промышленные сельскохозяйственные практики",  
            "Глобальная торговля",  
            "Энергетическая неэффективность зданий",  
            "Нефтяные разливы",  
            "Отходы текстильной промышленности",  
            "Загрязнение воздуха от заводов",  
            "Увеличение туристического потока",  
            "Изменение климата",  
            "Увеличение использования пластика",  
            "Разрушение экосистем",  
            "Увеличение углеродного следа",  
            "Потребление электроэнергии в домах",  
            "Строительство новых дорог",  
            "Охота и браконьерство",  
            "Увеличение числа свалок",  
            "Загрязнение почвы",  
            "Использование фреонов",  
            "Транспортировка товаров на большие расстояния",  
            "Нехватка альтернативных источников энергии",  
            "Изменение землепользования",  
            "Развитие городов без планирования",  
            "Потребление ресурсов без учета устойчивости",  
            "Загрязнение рек и водоемов",  
            "Нехватка экологического образования",  
            "Увеличение производства электроники",  
            "Выбросы углекислого газа от отопления",  
            "Неправильная утилизация отходов",  
            "Увеличение числа промышленных отходов",  
            "Загрязнение от сельскохозяйственной техники",  
            "Нехватка зеленых насаждений в городах",  
            "Повышение уровня моря",  
            "Изменения в метеорологических условиях",  
            "Разрушение коралловых рифов",  
            "Увеличение числа природных катастроф",  
            "Использование невозобновляемых ресурсов",  
            "Загрязнение от судоходства",  
            "Бурение на нефть и газ в уязвимых зонах",  
            "Нехватка систем переработки отходов",  
            "Изменения в миграции животных",  
            "Увеличение числа фабрик и заводов",  
            "Загрязнение от строительных работ",  
            "Nеправильное обращение с опасными отходами",  
            "Разрушение почвы из-за интенсивного земледелия",  
            "Увеличение использования ископаемого топлива в отоплении",  
            "Нехватка поддержки устойчивого развития",  
            "Увеличение числа авиаперевозок",  
            "Nеправильное обращение с химикатами",  
            "Загрязнение от добычи полезных ископаемых",  
            "Образование смога",  
            "Nехватка общественного транспорта",  
            "Увеличение числа автомобилей на бензине и дизеле",  
            "Разрушение природных ареалов обитания животных",  
            "Загрязнение от свинца и других тяжелых металлов",  
            "Неэффективное использование ресурсов",  
            "Увеличение числа свиней и коров на фермах",  
            "Выбросы углекислого газа от цементных заводов",  
            "Nехватка зелёных технологий",  
            "Отсутствие международного сотрудничества",  
            "Pотребление электроэнергии",  
            "Загрязнение от химической промышленности",  
            "Nехватка инициатив по охране окружающей среды",  
            "Увеличение потребления одноразовых товаров",  
            "Развитие неустойчивого туризма",  
            "Изменения структуры питания населения",  
            "Отсутствие контроля за выбросами",  
            "Pотребление воды для сельского хозяйства",  
            "Загрязнение от обработки металлов",  
            "Использование неперерабатываемых упаковок",  
            "Влияние моды на потребление",  
            "Nехватка инвестиций",  
            "Разрушение экосистем из-за урбанизации",  
            "Pотребление ресурсов без учета будущих поколений",  
            "Загрязнение от горнодобывающей промышленности",  
            "Неэффективные методы утилизации отходов",  
            "Nехватка знаний о переработке материалов",  
            "Увеличение потребления электроэнергии",  
            "Отсутствие программы по сокращению углеродного следа",   
            "Загрязнение от сельскохозяйственного стока",
            "Nеправильное управление природными ресурсами",
            "Увеличение потребления невозобновляемых материалов"

]

consequences = ["Повышение уровня моря",  
                "Изменение климата",  
                "Увеличение частоты экстремальных погодных явлений",  
                "Таяние ледников",  
                "Увеличение температуры океанов",  
                "Изменение экосистем",  
                "Вымирание видов",  
                "Увеличение кислотности океанов",  
                "Потеря сельскохозяйственных угодий",  
                "Увеличение засух",  
                "Разрушение коралловых рифов",  
                "Увеличение числа лесных пожаров",  
                "Проблемы со здоровьем у людей",  
                "Увеличение распространения инфекционных заболеваний",  
                "Снижение качества воздуха",  
                "Загрязнение водоемов",  
                "Увеличение миграции населения",  
                "Проблемы с продовольственной безопасностью",  
                "Изменение миграционных путей животных",  
                "Снижение биоразнообразия",  
                "Увеличение числа наводнений",  
                "Разрушение природных ареалов обитания",  
                "Увеличение выбросов парниковых газов",  
                "Увеличение затрат на здравоохранение",  
                "Снижение уровня жизни в уязвимых регионах",  
                "Изменения в сезонности сельскохозяйственных культур",  
                "Увеличение конкуренции за ресурсы",  
                "Проблемы с доступом к пресной воде",  
                "Разрушение инфраструктуры из-за стихийных бедствий",  
                "Увеличение социальной напряженности",  
                "Снижение качества жизни в городах",  
                "Разрушение экосистем из-за урбанизации",  
                "Снижение продуктивности рыболовства",  
                "Увеличение потребления энергии для охлаждения",  
                "Потеря ледяных шапок и полярных льдов",  
                "Увеличение выбросов углекислого газа от таяния вечной мерзлоты",  
                "Разрушение сельских общин",  
                "Проблемы с транспортом из-за погодных условий",  
                "Снижение устойчивости экосистем к изменениям",  
                "Увеличение случаев аллергий и астмы у населения",  
                "Разрушение культурного наследия из-за климатических изменений",  
                "Увеличение затрат на восстановление после стихийных бедствий",  
                "Изменения в распределении ресурсов и богатств",  
                "Обострение конфликтов из-за нехватки ресурсов"

]

facts = [
    "Более 90% глобального потепления происходит в океанах.",
    "Пластиковые отходы составляют около 80% всего морского мусора.",
    "Более 20% всех мировых выбросов парниковых газов приходится на лесное хозяйство и сельское хозяйство.",
    "Каждый год в мире вырубается примерно 10 миллионов гектаров леса.",
    "Автомобили являются одним из главных источников загрязнения воздуха в городах.",
    "Для производства одного килограмма говядины требуется примерно 15 тысяч литров воды.",
    "Около 70% мировых запасов пресной воды используется для сельского хозяйства.",
    "В результате таяния ледников повышается уровень моря, что угрожает прибрежным городам.",
    "Концентрация углекислого газа в атмосфере достигла самого высокого уровня за последние 800 тысяч лет.",
    "Из-за изменения климата увеличивается количество экстремальных погодных явлений, таких как ураганы и наводнения.",
    "Около 35% всех выбросов парниковых газов приходится на энергетическую отрасль.",
    "В среднем около 8 миллионов тонн пластика попадает в океаны каждый год.",
    "С каждым годом наблюдается уменьшение численности многих видов животных из-за изменения климата и разрушения мест обитания.",
    "Большая часть загрязнения воздуха связана с деятельностью человека, такой как сжигание ископаемого топлива.",
    "Использование пестицидов в сельском хозяйстве загрязняет почву и водные ресурсы.",
    "Около 1/3 всех производимых в мире продуктов питания ежегодно выбрасывается.",
    "Большая часть отходов, загрязняющих океаны, поступает с суши.",
    "Потребление большого количества энергии в домах и на производстве способствует глобальному потеплению.",
    "Загрязнение воздуха может привести к проблемам со здоровьем, таким как заболевания дыхательных путей и сердечно-сосудистой системы.",
    "Многие виды животных и растений находятся под угрозой исчезновения из-за разрушения их среды обитания.",
    "Потребление воды постоянно увеличивается, в то время как запасы пресной воды ограничены.",
    "Для производства бумаги и картона используются большие площади лесных массивов.",
    "Химические удобрения, используемые в сельском хозяйстве, загрязняют почву и воду.",
    "Перевозка товаров на дальние расстояния приводит к выбросам парниковых газов.",
    "Повышение температуры воды в океане вызывает разрушение коралловых рифов.",
    "Изменения климата приводят к более частым и сильным лесным пожарам.",
    "Большое количество пластика остается непереработанным и загрязняет окружающую среду.",
    "Растущее население планеты увеличивает потребление ресурсов и производство отходов.",
    "Загрязнение почвы приводит к снижению ее плодородия и урожайности сельскохозяйственных культур.",
    "Производство электроники и компьютеров сопровождается загрязнением окружающей среды.",
    "Загрязнение рек и озер влияет на здоровье человека и других живых организмов.",
    "Здания с низкой энергоэффективностью потребляют много энергии для отопления и охлаждения.",
    "Использование фреонов в холодильниках и кондиционерах способствует разрушению озонового слоя.",
    "Потребление мяса, особенно говядины, приводит к выбросам парниковых газов.",
    "Выбросы метана от свалок способствуют глобальному потеплению.",
    "Нефтяные разливы в океане приводят к гибели морских животных и загрязнению воды.",
     "Текстильная промышленность является одной из самых загрязняющих отраслей производства.",
    "Загрязнение воздуха от заводов и фабрик способствует проблемам со здоровьем людей.",
    "Повышение температуры океанов приводит к обесцвечиванию и разрушению коралловых рифов.",
     "Увеличение количества автомобилей на дорогах ведет к усилению загрязнения воздуха.",
      "В результате изменения климата изменяется миграция животных и птиц.",
      "Неправильная утилизация отходов приводит к загрязнению почвы и воды.",
      "Разрушение почвы из-за интенсивного земледелия ухудшает ее плодородие.",
    "Использование невозобновляемых источников энергии ведет к выбросам парниковых газов.",
    "Изменения климата влияют на распространение различных заболеваний."
]


@bot.message_handler(commands=['start'])
def start_cmd(message: Message):
    bot.send_message(message.chat.id, "Привет! Доступные команды:\n"
                                     "/info - Информация\n"
                                     "/tips - Советы\n"
                                     "/global - Глобальное потепление\n"
                                     "/help - Помощь\n"
                                     "/test - Тест\n"
                                     "/facts - Все про факты\n"
                                     "/register - Регистрация")

@bot.message_handler(commands=['info'])
def handle_info_cmd(message: Message):
    name = ''
    if data.get(message.from_user.id, {}).get('name'):
        name = data.get(message.from_user.id, {}).get('name')
    if not name:
        bot.send_message(message.chat.id, f"Впиши своё имя и фамилию в команде /register\n\n"
                                     "Для возврата в меню: /start")
        return

    bot.send_message(message.chat.id, "Выбери раздел\n"
                                     "/about - О боте\n"
                                     "/ecology - Об экологии\n\n"
                                     "Для возврата в меню: /start")

@bot.message_handler(commands=['tips'])
def handle_tips_cmd(message: Message):
    name = ''
    if data.get(message.from_user.id, {}).get('name'):
        name = data.get(message.from_user.id, {}).get('name')
    if not name:
        bot.send_message(message.chat.id, f"Впиши своё имя и фамилию в команде /register\n\n"
                                     "Для возврата в меню: /start")
        return

    bot.send_message(message.chat.id, "Выберите раздел:\n"
                                     "/energy - Экономия энергии\n"
                                     "/mysor - Утилизация отходов\n\n"
                                     "Для возврата в меню: /start")

@bot.message_handler(commands=['global'])
def handle_global_cmd(message: Message):
    name = ''
    if data.get(message.from_user.id, {}).get('name'):
        name = data.get(message.from_user.id, {}).get('name')
    if not name:
        bot.send_message(message.chat.id, f"Впиши своё имя и фамилию в команде /register\n\n"
                                     "Для возврата в меню: /start")
        return


    bot.send_message(message.chat.id, "Выберите раздел:\n"
                                    "/causes - Причины\n"
                                     "/consequences - Последствия\n\n"
                                     "Для возврата в меню: /start")

@bot.message_handler(commands=['help'])
def handle_help_cmd(message: Message):
    name = ''
    if data.get(message.from_user.id, {}).get('name'):
        name = data.get(message.from_user.id, {}).get('name')
    if not name:
        bot.send_message(message.chat.id, f"Впиши своё имя и фамилию в команде /register\n\n"
                                     "Для возврата в меню: /start")
        return

    bot.send_message(message.chat.id, "Связь с разработчиком @sunnyweter\n\n"
                                      "Для возврата в меню: /start")

@bot.message_handler(commands=['about'])
def handle_about_cmd(message: Message):
    name = ''
    if data.get(message.from_user.id, {}).get('name'):
        name = data.get(message.from_user.id, {}).get('name')
    if not name:
        bot.send_message(message.chat.id, f"Впиши своё имя и фамилию в команде /register\n\n"
                                     "Для возврата в меню: /start")
        return

    bot.send_message(message.chat.id, "EcoBot — ваш персональный помощник в вопросах экологии. Получайте информацию о загрязнении окружающей среды, глобальном потеплении, узнавайте о способах уменьшить свой экологический след и проверяйте свои знания!\n\n"
                                      "Для возврата в меню: /start")

@bot.message_handler(commands=['ecology'])
def handle_ecology_cmd(message: Message):
    name = ''
    if data.get(message.from_user.id, {}).get('name'):
        name = data.get(message.from_user.id, {}).get('name')
    if not name:
        bot.send_message(message.chat.id, f"Впиши своё имя и фамилию в команде /register\n\n"
                                     "Для возврата в меню: /start")
        return

    bot.send_message(message.chat.id, "Экология—это наука о взаимоотношениях живых организмов с окружающей средой.\n\n"
                                      "Для возврата в меню: /start")

@bot.message_handler(commands=['energy'])
def handle_energy_cmd(message: Message):
    name = ''
    if data.get(message.from_user.id, {}).get('name'):
        name = data.get(message.from_user.id, {}).get('name')
    if not name:
        bot.send_message(message.chat.id, f"Впиши своё имя и фамилию в команде /register\n\n"
                                     "Для возврата в меню: /start")
        return

    bot.send_message(message.chat.id, "Используйте энергосберегающие лампы, выключайте свет.\n"
                                      "Отключайте не использующиеся зарядные устройства от сети.\n"
                                      "Регулярно чистите все лампочки от пыли.\n"
                                      "Не оставляйте бытовую технику в режиме ожидания. Она все равно использует электроэнергию.\n"
                                      "Покупайте устройства, которые отключаются автоматически.\n"
                                      "Мойте окна и не загромождайте подоконники, чтобы в помещении было светло.\n"
                                      "Перед длительным отсутствием, например, перед поездкой в отпуск, отключайте бытовую технику.\n\n"
                                       "Для возврата в меню: /start")
                                
@bot.message_handler(commands=['mysor'])
def handle_mysor_cmd(message: Message):
    name = ''
    if data.get(message.from_user.id, {}).get('name'):
        name = data.get(message.from_user.id, {}).get('name')
    if not name:
        bot.send_message(message.chat.id, f"Впиши своё имя и фамилию в команде /register\n\n"
                                     "Для возврата в меню: /start")
        return

    bot.send_message(message.chat.id, "Сортируйте мусор, используйте контейнеры для переработки.\n\n"
                                     "Для возврата в меню: /start")



@bot.message_handler(commands=['causes'])
def handle_causes_cmd(message: Message):
    name = ''
    if data.get(message.from_user.id, {}).get('name'):
        name = data.get(message.from_user.id, {}).get('name')
    if not name:
        bot.send_message(message.chat.id, f"Впиши своё имя и фамилию в команде /register\n\n"
                                     "Для возврата в меню: /start")
        return

    random_choice = random.choice(causes)
    bot.send_message(message.chat.id, random_choice + "\n\n"
                                     "Команда для новой причины: /return\n"
                                    "Для возврата в меню: /start")

@bot.message_handler(commands=['return'])
def handle_return_cmd(message: Message):
    name = ''
    if data.get(message.from_user.id, {}).get('name'):
        name = data.get(message.from_user.id, {}).get('name')
    if not name:
        bot.send_message(message.chat.id, f"Впиши своё имя и фамилию в команде /register\n\n"
                                     "Для возврата в меню: /start")
        return

    random_choice = random.choice(causes)
    bot.send_message(message.chat.id, random_choice + "\n\n"
                                     "Команда для новой причины: /return\n"
                                    "Для возврата в меню: /start")

@bot.message_handler(commands=['consequences'])
def handle_consequences_cmd(message: Message):
    name = ''
    if data.get(message.from_user.id, {}).get('name'):
        name = data.get(message.from_user.id, {}).get('name')
    if not name:
        bot.send_message(message.chat.id, f"Впиши своё имя и фамилию в команде /register\n\n"
                                     "Для возврата в меню: /start")
        return

    random_choice = random.choice(consequences)
    bot.send_message(message.chat.id,  f"{random_choice}\n\n"
                                     "Команда для новой причины: /new\n"
                                    "Для возврата в меню: /start")

@bot.message_handler(commands=['new'])
def handle_return_cmd(message: Message):
    name = ''
    if data.get(message.from_user.id, {}).get('name'):
        name = data.get(message.from_user.id, {}).get('name')
    if not name:
        bot.send_message(message.chat.id, f"Впиши своё имя и фамилию в команде /register\n\n"
                                     "Для возврата в меню: /start")
        return

    random_choice = random.choice(causes)
    bot.send_message(message.chat.id, random_choice + "\n\n"
                                     "Команда для новой причины: /new\n"
                                    "Для возврата в меню: /start")

@bot.message_handler(commands=['facts'])
def handle_facts_cmd(message: Message):
    name = ''
    if data.get(message.from_user.id, {}).get('name'):
        name = data.get(message.from_user.id, {}).get('name')
    if not name:
        bot.send_message(message.chat.id, f"Впиши своё имя и фамилию в команде /register\n\n"
                                     "Для возврата в меню: /start")
        return

    
    random_choice = random.choice(facts)
    bot.send_message(message.chat.id, random_choice + "\n\n"
                                     "Команда для нового факта: /newfact\n"
                                     "Для возврата в меню: /start")

@bot.message_handler(commands=['newfact'])
def handle_newfact_cmd(message: Message):
    random_choice = random.choice(facts)
    name = ''
    if data.get(message.from_user.id, {}).get('name'):
        name = data.get(message.from_user.id, {}).get('name')
    if not name:
        bot.send_message(message.chat.id, f"Впиши своё имя и фамилию \n\n"
                                     "Команда для регистрации /register\n"
                                     "Для возврата в меню: /start")
        return
    
    bot.send_message(message.chat.id, random_choice + "\n\n"
                                      f"{name},Команда для новой причины: /newfact\n"
                                    "Для возврата в меню: /start")                                     


@bot.message_handler(commands=['test'])
def start_test(message: Message):
    name = data.get(message.from_user.id, {}).get('name')
    
    if not name:
        bot.send_message(message.chat.id, f"Впиши своё имя и фамилию \n\n" 
                                           "Команда для регистрации /register\n" 
                                           "Для возврата в меню: /start")
        return
    
    
    bot.send_message(message.chat.id, f"{name}, Для прохода на тест советуем зайти на сайт http://127.0.0.1:5000/ \n\n" 
                                       "Для возврата в меню: /start")
    
@bot.message_handler(commands=['register'])
def start_test(message: Message):

    bot.send_message(message.chat.id, "Напиши мне твое имя и фамилию \n\n"
                                     "Для возврата в меню: /start")
    bot.register_next_step_handler(message, get_name)

def get_name(message: Message):
    global data
    name = message.text
    if '/' in name:
        bot.send_message(message.chat.id, "Имя не должно содержать символ '/'. Пожалуйста, введите позывной еще раз:")
        bot.register_next_step_handler(message, get_name)
        return

    data[message.from_user.id] = {}
    data[message.from_user.id]['name'] = name.title()
    bot.send_message(message.chat.id, "Спасибо,можете пользоваться ботом!"
                                     "Для возврата в меню: /start")





bot.polling(none_stop=True)

